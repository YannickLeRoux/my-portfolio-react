import { ObservableQuery } from '../../src/core/ObservableQuery';
import { ApolloQueryResult } from '../../src/core/types';
import { Subscription } from '../../src/util/Observable';
/**
 *
 * @param observable the observable query to subscribe to
 * @param shouldResolve should we resolve after seeing all our callbacks [default: true]
 *   (use this if you are racing the promise against another)
 * @param wait how long to wait after seeing desired callbacks before resolving
 *   [default: -1 => don't wait]
 * @param errorCallbacks an expected set of errors
 */
export declare type Options = {
    observable: ObservableQuery<any>;
    shouldResolve?: boolean;
    wait?: number;
    errorCallbacks?: ((error: Error) => any)[];
};
export declare type ResultCallback = ((result: ApolloQueryResult<any>) => any);
export declare function observableToPromiseAndSubscription({ observable, shouldResolve, wait, errorCallbacks }: Options, ...cbs: ResultCallback[]): {
    promise: Promise<any[]>;
    subscription: Subscription;
};
export default function (options: Options, ...cbs: ResultCallback[]): Promise<any[]>;
